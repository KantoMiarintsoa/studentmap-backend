// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  OWNER
  ORGANIZER
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  firstName            String
  lastName             String
  password             String                 @db.Text
  contact              String
  profilePicture       String?
  address              String?
  preference           String[]
  username             String?
  role                 Role                   @default(STUDENT)
  Accommodation        Accommodation[]
  University           University[]
  Event                Event[]
  EventStudent         EventStudent[]
  createdAt            DateTime               @default(now())
  sentMessages         Messages[]             @relation("SentMessages")
  receivedMessages     Messages[]             @relation("ReceivedMessages")
  Nickname             Nickname[]
  Nickname1            Nickname[]             @relation("User1Nicknames")
  Nickname2            Nickname[]             @relation("User2Nicknames")
  pictureAccommodation PictureAccommodation[]
  UserService          UserService[]
  serviceRemainders    Int                    @default(0)
  oAuthTokens          OAuthToken[]
  provider             String?
  googleAccessToken    String?
}

model OAuthToken {
  id          Int      @id @default(autoincrement())
  accessToken String   @unique
  expiresAt   DateTime
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Accommodation {
  id                Int       @id @default(autoincrement())
  name              String
  address           String
  neighborhood      String?
  city              String?
  area              Float
  receptionCapacity String
  IsAvailable       Boolean   @default(false)
  rentMin           Float
  rentMax           Float
  currency          String    @default("Ar")
  media             Json?
  ownerId           Int
  owner             User      @relation(fields: [ownerId], references: [id])
  type              Type
  description       String?
  createdAt         DateTime? @default(now())
  localisation      Json?
  latitude          Float?
  longitude         Float?
}

enum Type {
  APARTEMENT
  GUEST
  BUNGALOW
  DORTOIR
}

model University {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  city         String?
  address      String?
  webSite      String
  mention      String[]
  type         TypeUniversity
  // localisation Int[]
  // ownerId     Int
  // owner       User           @relation(fields: [ownerId], references: [id])
  User         User?          @relation(fields: [userId], references: [id])
  userId       Int?
  Event        Event[]
  neighborhood String?
  latitude     Float?
  longitude    Float?
}

enum TypeUniversity {
  public
  prive
}

model Event {
  id                     Int            @id @default(autoincrement())
  name                   String
  description            String
  startDate              DateTime
  endDate                DateTime
  created_at             DateTime       @default(now())
  updated_at             DateTime       @default(now())
  location               String?
  capacity               Float?
  registration_available Boolean?
  registration_link      String?
  image                  String?
  universityId           Int?
  university             University?    @relation(fields: [universityId], references: [id])
  userId                 Int
  user                   User           @relation(fields: [userId], references: [id])
  EventStudent           EventStudent[]
}

model EventStudent {
  userId       Int
  eventId      Int
  registeredAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  event        Event    @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}

enum EventType {
  STUDENT_FAIR
  FORUM
  cCONFERENCE
}

model Messages {
  id              Int         @id @default(autoincrement())
  senderId        Int
  sender          User        @relation("SentMessages", fields: [senderId], references: [id])
  receiverId      Int
  receiver        User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content         String
  messageType     MessageType @default(TEXT)
  filename        String?
  createdAt       DateTime    @default(now())
  replyMessageId  Int?
  replyTo         Messages?   @relation("ReplyToMessage", fields: [replyMessageId], references: [id])
  replyToMessages Messages[]  @relation("ReplyToMessage")
  isRead          Boolean     @default(false)
}

enum MessageType {
  TEXT
  VIDEO
  IMAGE
  FILE
  AUDIO
}

model Nickname {
  id        Int     @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  user1     User    @relation("User1Nicknames", fields: [user1Id], references: [id])
  user2     User    @relation("User2Nicknames", fields: [user2Id], references: [id])
  nickName1 String?
  nickName2 String?
  User      User?   @relation(fields: [userId], references: [id])
  userId    Int?

  @@unique([user1Id, user2Id])
}

enum ServiceType {
  FREEE
  STANDARD
  PREMIUM
  ENTERPRISE
}

model Service {
  id              Int           @id @default(autoincrement())
  name            ServiceType   @unique
  description     String
  price           Int
  maxAccomodation Int
  durationDays    Int
  createdAt       DateTime      @default(now())
  UserService     UserService[]
}

model UserService {
  id         Int      @id @default(autoincrement())
  ownerId    Int
  owner      User     @relation(fields: [ownerId], references: [id])
  serviceId  Int
  service    Service  @relation(fields: [serviceId], references: [id])
  registerAt DateTime @default(now())
}

model PictureAccommodation {
  id         Int      @id @default(autoincrement())
  ownerId    Int
  owner      User?    @relation(fields: [ownerId], references: [id])
  pictureUrl String
  uploadAt   DateTime @default(now())
}
